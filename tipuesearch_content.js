var tipuesearch = {"pages":[{"title":"About this site","text":"I want to share the basic ideas behind how to create , share , and maintain this website. You can find the python source code for this website here . I hope you find something useful! Overview Here's the basic idea: Write files in Markdown (basically human readable) locally. Use python package pelican to compile this into a website (HTML) Push the HTML to GitHub (in a way where GH agrees to serve your website) What's nice? You write in Markdown rather than HTML. This is a plus for me. You can make use of various themes developed for pelican so that you can input the same content, but get differently styled webpages. If you move to another system (e.g., Jekyll or Hugo) the process appears to be relatively painless because the content is pretty well separated from the style. Hosting is easy and free. What's not so nice? Markdown has some limitations and you sometimes end up having to write HTML yourself. Sometimes I think I waste more time trying to coax the Markdown than I would have just writing HTML. The themes seem to have their own quirks and requirements so that switching themes is not as effortless as you might desire. Plugins and related packages change ways such that the ecosystem seems somewhat fragile. I don't know if this is a sign that pelican is losing momentum or what.. More details How to create this website? This website is created using the Python package pelican . You can install this with, 1 pip install pelican There are a few other dependencies you may need to also install with pip like Markdown . I didn't begin this process using virtual environments, but I do now and certainly recommend it. The upshot is that you choose particular packages (and versions) that you want to use with this website. These choices can differ from what you have running at large on your machine (or what you use in other virtual environments for other projects). You specify these in the requirements.txt file. Whenever you recompile the site, you do this from within the virtual environment. I use venv where activation looks like this: 1 source env/bin/activate The site content is written in the Markdown language (easier to write than HTML and more limited). Then pelican, along with a pelican theme, compiles the content into a website. This is done by running, 1 make html The website is written to a directory named output . You can then view this website locally by running, 1 make serve and pointing your browser to http://localhost:8000/ , or http://127.0.0.1:8000/ . This is a chance to see how things will look before committing your changes. How to share this website? There are various options for how to share the website. I chose to host it on Github. This was fairly straightforward. Turn the output directory into a local git repository by running, 1 2 cd output git init Create a repository on Github named yourusername.github.io and push your local output repository here. 1 2 3 git commit -am \"first commit\" git remote add origin https://github.com/yourusername/repo_name.git git push origin master Your website will then be hosted at yourusername.github.io . Note: it can take a few minutes for pushed changes to be reflected on the website. Note: compiling the website clobbers the existing output directory. So you have to set up the git process from the beginning each time. I wrote a simple script mypublish.sh (in the source) that I use to accomplish this. How to maintain the website? For starters, you'll want to turn your website source into a git repo. And likely push it to GH too. It is recommended to set up an appropriate .gitignore file. The basic flow: Make some change locally. E.g., write a new article. Check out the effect. Compile the website and serve it locally and view http://localhost:8000/ , 1 2 make html make serve Push changes to GitHub - remember that you have source and website repo. 1 2 3 4 5 git add content/insightful_article.md git commit -am \"added yet another insightful article\" git push ./mypublish.sh Related resources I found useful: - https://appliedcaffeine.org/navbaritems.html","tags":"misc","url":"pages/about-this-site.html","loc":"pages/about-this-site.html"},{"title":"Article Template","text":"Medium title Write cool stuff here.","tags":"misc","url":"pages/article-template.html","loc":"pages/article-template.html"},{"title":"Contact","text":"Hi, I am a data scientist and applied mathematician. I am also other things - a physicist, educator, musician, and a dad! Curriculum Vitae Feel free to contact me and I'll do my best to get back to you.","tags":"misc","url":"pages/contact.html","loc":"pages/contact.html"},{"title":"CV/Professional","text":"Thesis: \"EofToCM\" Experience Current Math and Statistics Educator at University of California, Davis 2017 - 2018 Project Scientist at University of California, Davis Copy resume Previous Projects Project 1 page this that","tags":"misc","url":"pages/cv-professional.html","loc":"pages/cv-professional.html"},{"title":"","text":"Welcome! My name is John Mahoney and I like to learn, think, create and share! I have worked as a physicist, mathematician, coder, educator and musician. Have a look at some of my previous projects! Here is my resume . Contact me regarding professional opportunities at mohnjahoney # gmail.","tags":"misc","url":".","loc":"."},{"title":"Cheatsheet","text":"First is the Markdown input. Second is the rendered output. Links Make intra-site links in Markdown format. 1 [a link relative to the current file]({filename}../pages/article-template.md) a link relative to the current file 1 [a link relative to the content root]({filename}/pages/article-template.md) a link relative to the content root Need something like STATIC_PATHS = ['images', 'pdfs'] in pelican_conf.py 1 [a link to a nonstandard subdirectory]({static}/pdfs/John_Mahoney_resume.pdf) a link to a nonstandard subdirectory To control the size of an image, append the parameters in curly brackets. How to control the height and width together? There appears to be an auto height in this theme that clobbers the one I set. Set in pixels 1 ! [ smiley ] ( { static } / images / music_image . png ) { height = 50 width = 50 } Set as a percent 1 ! [ smiley ] ( { static } / images / music_image . png ) { height = 50 % width = 50 % } Code Use three colons followed by the language identifier. Start each line with 4 spaces. 1 2 :::python print(\"The triple-colon syntax will *not* show line numbers.\") 1 print ( \"The triple-colon syntax will *not* show line numbers.\" ) 1 2 #!python print(\"The path-less shebang syntax *will* show line numbers.\") 1 print ( \"The path-less shebang syntax *will* show line numbers.\" ) 1 print(\"Another possibility is to use triple back-ticks to create a code-fence.\") print(\"Another possibility is to use triple back-ticks to create a code-fence.\")","tags":"misc","url":"pages/cheatsheet.html","loc":"pages/cheatsheet.html"},{"title":"Project Page","text":"This could be a collection of pointers to projects Should pointers be wrt existing file structure or compiled?","tags":"pelican","url":"pages/projects.html","loc":"pages/projects.html"},{"title":"Remodeling website","text":"This is my first post in the remodeled version of my website. I had a few goals in this remodel: Continue with pelican as a site generator Use jupyter notebooks as a content source Have a \"nice\" directory structure Host on GitHub Allow custom javascript for interactive demos While these targets seemed relatively modest, it took some doing even with the many resources available. Luckily, I found an existing site with many of these features. My goal then became to adapt Jack's website. I wanted to use a different theme and also strip some of what I thought was unnecessary. This was not trivial and not completely solved. Please steal my sourcecode from GH. I don't want to create a formal writeup here because things change quickly. But here are a few thoughts: pelican has some nice features, but it is not clear to me that it is on a path toward long-term development and support. E.g. look at how recently plugins and such have been updated on GitHub. Related, I had hopes that various related packages would be well-functioning enough so that I could install them and not worry about versions. This appears to be not at all true. In fact, it seems like this might be more the norm. So get yourself a virtual environment and get used to it. I am using venv and my requirements file is in the source. Certain little things can be terribly frustrating. For example, sizing images in Markdown appears to be a big pain with many conflicting styles. Prepare for that. pelican plugins used to be all on in one GH repo. Now it seems that things are moving toward separating them into separate but connected repos. Some versioning issues lurk there. Also it looks like some plugins are not better available as packages to install via pip, e.g. ghp-import. Github really falls down sometimes. For example, rendering jupyter notebooks is an issue that has plagued people for years. It's a wonder folks still use it in this way. (Do they? Am I the only one foolish enough to try?) It also seems that GH does some funny things w.r.t. hosting and updating your website. There are several times where the site did not render correctly and then fixed itself - something about the css not being found. Also, every time you push your new site to GH, it takes at least a minute or maybe 5 for it to appear live. File structure, articles, pages, categories, tags, menu building, internal site referencing, arg.. This is easy when it works and really painful to debug when it doesn't.","tags":"pelican","url":"remodeling-website.html","loc":"remodeling-website.html"},{"title":"K-Nearest Neighbors","text":"\"If it walks near k other ducks, then it probably is a duck.\" Setup Imagine there is a lake with lots of birds hanging around: ducks, geese, cranes, herons, and so on. We can see each bird clearly enough to tell what type it is. Problem: Now imagine there is one bird out there that we can't see well enough to identify its type. Maybe there is a bit of glare from the sun or something. How might we guess the type of this bird? Solution: One way to do this is to assume that birds tend to hang around birds of the same type. So, we can look at the nearby birds (the \"neighbors\"), see what kind they are, and assume that our mystery bird's type is that of the most common neighbor. And that's the k-Nearest Neighbors algorithm! The k in kNN is simply the number of nearby birds we should include in our decision. You can see that if we include just one neighbor, we might be subject to some sporadic errors. Alternatively if we let k be equal to the total number of birds at the lake, then our guess would be the same no matter where the mystery bird is located - not very useful. kNN can also be used to provide numeric rather than categorical output. For example, we might want to guess the mystery bird's height. We would collect the height of each neighboring bird, and then simply take the average (or something similar) to get our prediction. Supervised learning: We need to know the type (or size) of all birds except the bird of interest. Potentially slow: Naive distance computations are.. well.. slow. There are ways to improve that.","tags":"misc","url":"k-nearest-neighbors.html","loc":"k-nearest-neighbors.html"},{"title":"Design your own hexaflexagon","text":"Hexaflexagons are strange, paper creatures made of origami and a sprinkle of magic. \"But it looks like a hexagonal coaster for my coffee..\", you say, \"what's cool about that?\" What's cool is that this coaster has three sides! The nice image here is from wikimedia . You will find that there are many great resources that discuss how to create these cool objects and also about the mathematics underneath. Wiki Martin Gardner Vi Hart The designs on these versions are largely drawn by hand. Or if they are printed, they appear to be created in Photoshop or something. Make a custom version! I wanted to make one where I could choose my own image for each of the three sides. And I wanted to make a tool for anyone else to do that too! Go check it out! I made this during COVID and was thinking about all of the kids stuck at home who needed neat projects to stimulate their minds. So it was important for me to make this eminently shareable. I used p5js (and its online editor) - a fun language and a cool tool. Open the tool, drag in three images of your choice, rotate and scale them to suit your fancy, generate the composite image, download, print, cut out, and fold! Here's an image to get you started. You can play with the code for the HFG tool here . Please drop me a line if you had fun with this or come up with an interesting twist.","tags":"misc","url":"hexaflexagon.html","loc":"hexaflexagon.html"},{"title":"Notebook template","text":"Notes: \\(\\LaTeX\\) : It renders correctly from the markdown file. The \\(\\LaTeX\\) within the notebook markdown cells renders the equations, but not the inline math. TODO: fix this When you reference a single cell, you can't say cells[4], you have to write cells[4:5]. The numbers in cells[m:n] don't refer to the \"input numbers\" you see in the notebook. The markdown cells are counted too. This makes it a bit of a pain to locate particular cells within a larger notebook. Here I am selecting a cell from the notebook. In [4]: a = 0 b = 1 print ( fib ( a , b , 10 )) a = 5 b = 6 print ( fib ( a , b , 10 )) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] [5, 6, 11, 17, 28, 45, 73, 118, 191, 309] Now I am displaying the whole notebook. This is an example jupyter notebook. Demo some things for reference: make sure imports work test plotting: %inline vs %notebook import the whole notebook OR just selected pieces does the notebook Markdown look OK when called into the webpage? do the Markdown calls depend on the order of execution? or just the order in the notebook? As a test project, we'll look at the Fibonacci numbers and make some plots of their ratios. In [1]: import numpy as np import matplotlib.pyplot as plt % matplotlib inline Which versions of these packages will be found? This notebook won't be running live on the website, so this will just depend on how I execute the cells locally. One question is whether or not this will be impacted by the virtual environment (that I am typically in when working on the site). You can see below that it is independent of the virtual environment. In [2]: print ( np . __version__ ) print ( np . __file__ ) # This is something I know my site venv imports as an old version. import nbconvert print ( nbconvert . __version__ ) print ( nbconvert . __file__ ) 1.19.5 /usr/local/lib/python3.8/site-packages/numpy/__init__.py 6.0.7 /usr/local/lib/python3.8/site-packages/nbconvert/__init__.py Now let's do some example coding and plotting. In [3]: def fib ( a , b , n ): \"\"\"Using `a` and `b` as seeds, return the n'th Fibonacci number. Example: a = 2, b = 5, n = 6 Compute like this: (2, 5, 2 + 5 = 7, 5 + 7 = 12, 7 + 12 = 19, 12 + 19 = 31) \"\"\" seq = [ a , b ] for i in range ( n - 2 ): seq . append ( seq [ - 1 ] + seq [ - 2 ]) return seq Let's test this function. In [4]: a = 0 b = 1 print ( fib ( a , b , 10 )) a = 5 b = 6 print ( fib ( a , b , 10 )) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] [5, 6, 11, 17, 28, 45, 73, 118, 191, 309] Let's look at the ratio of successive Fibonacci numbers for various choices of the seeds. In [5]: def ratio_plot ( seq , ax = None ): seq = np . array ( seq ) if ax is None : fig = plt . figure () ax = fig . gca () plt . plot ( seq [ 1 :] / seq [: - 1 ], 'o-' ) Plot one sequence of ratios. In [6]: a = 0 b = 1 seq = fib ( a , b , 10 ) ratio_plot ( seq ) <ipython-input-5-9e1244002184>:8: RuntimeWarning: divide by zero encountered in true_divide plt.plot(seq[1:] / seq[:-1], 'o-') Notice that the ratio seems to be stabilizing around 1.6 or so. Now let's do this for many seed combinations. In [7]: fig = plt . figure () ax = fig . gca () n = 10 for a in range ( 4 ): for b in range ( 4 ): seq = fib ( a , b , n ) ratio_plot ( seq , ax = ax ) <ipython-input-5-9e1244002184>:8: RuntimeWarning: invalid value encountered in true_divide plt.plot(seq[1:] / seq[:-1], 'o-') <ipython-input-5-9e1244002184>:8: RuntimeWarning: divide by zero encountered in true_divide plt.plot(seq[1:] / seq[:-1], 'o-') <ipython-input-5-9e1244002184>:8: RuntimeWarning: divide by zero encountered in true_divide plt.plot(seq[1:] / seq[:-1], 'o-') <ipython-input-5-9e1244002184>:8: RuntimeWarning: divide by zero encountered in true_divide plt.plot(seq[1:] / seq[:-1], 'o-') <ipython-input-5-9e1244002184>:8: RuntimeWarning: divide by zero encountered in true_divide plt.plot(seq[1:] / seq[:-1], 'o-') <ipython-input-5-9e1244002184>:8: RuntimeWarning: divide by zero encountered in true_divide plt.plot(seq[1:] / seq[:-1], 'o-') <ipython-input-5-9e1244002184>:8: RuntimeWarning: divide by zero encountered in true_divide plt.plot(seq[1:] / seq[:-1], 'o-') Observations: Ratios of successive Fibonacci numbers approach some constant value. The constant value appears to be roughly 1.6 independent of the seeds. Can we derive this value? Let's see what the $ \\LaTeX $ rendering looks like.. Assume there is some value $a$ that is the limit of this sequence of ratios. Consider three adjacent values in the sequence $(x, y, x + y)$ near to the limit (making use of the physicist lemma). Then the two ratios will be the same. $$ \\frac{y}{x} = \\frac{x + y}{y} $$ We can scale the entire sequence so $x = 1$. $$ \\frac{y}{1} = \\frac{1 + y}{y} $$ And rearrange. $$ y&#94;2 - y - 1 = 0 $$ Solving for the roots we find: $$ y_+ = \\frac{1 + \\sqrt{5}}{2} , y_- = \\frac{1 - \\sqrt{5}}{2} $$$$ y_+ \\simeq 1.618 , y_- \\simeq -0.618 $$ Congrats! We uncovered the \"golden ratio\" $\\phi = 1.618...$. Armed with this information we are ready to build famous buildings, write magnificent symphonies, and film epic Hollywood movies. Fewer have explored the lesser-known \"ochre ratio\" $ \\theta = -0.618... $. In [8]: a = 1 ochre = ( 1 - 5 ** 0.5 ) / 2 seq = fib ( a , ochre , 10 ) ratio_plot ( seq ) plt . ylim ( - 2 , 2 ) Out[8]: (-2.0, 2.0) This ratio has been important in things such as ultra-flat tables, horizon-design, and the limiting behavior of EEGs. In [ ]: if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" availableFonts: ['STIX', 'TeX'],\" + \" preferredFont: 'STIX',\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"python","url":"notebook-template.html","loc":"notebook-template.html"},{"title":"Define Functions Iteratively With Python","text":"An interesting problem came up recently, there was a piece of code absolutely full of the same function calls over and over again, meaning if anything ever need to change, that would have to be changed in over 500 places, not ideal. Thoughts go back to single responsbility, and don't repeat yourself principles for software engineering. So research & thinking begun on the best way to manage this issue. The first thing that came to mind, how could we define these functions and their combinations iteratively. Before we dive into this could be implemented, we need to really understand the problem. The use case for this repeated code, was to check the variables being passed to an endpoint were what they were expected to be. For example, if an endpoint is awaiting for a string, and an optional number, we want to check these before the operation goes through and potentially breaks something else down the line (bringing us back to the crash early principle). We'll start by defining two functions which will check that a variable is the type it's expected to be, and another to ensure it exists (not None in Python). In [12]: def check_type ( value , variable_type , variable_name ): if type ( value ) != variable_type : raise Exception ( f \"Variable ' { variable_name } ' is invalid type! Expected: { variable_type } .\" ) return value def check_exists ( value , variable_name ): if value is None : raise Exception ( f \"Variable ' { variable_name } ' is None! Check variable exists.\" ) return value Now that we've defined these functions, let's test that they work as expected and raise Exceptions when a problem statement comes up. In [10]: check_type ( 24 , int , 'lucky_number' ) check_type ( 'Hello world' , float , 'I thought this was a number' ) --------------------------------------------------------------------------- Exception Traceback (most recent call last) <ipython-input-10-bb70c914c0df> in <module> 1 check_type ( 24 , int , 'lucky_number' ) ----> 2 check_type ( 'Hello world' , float , 'I thought this was a number' ) <ipython-input-6-22c582f36d19> in check_type (value, variable_type, variable_name) 1 def check_type ( value , variable_type , variable_name ) : 2 if type ( value ) != variable_type : ----> 3 raise Exception ( f\"Variable '{variable_name}' is invalid type! Expected: {variable_type}.\" ) 4 5 def check_exists ( value , variable_name ) : Exception : Variable 'I thought this was a number' is invalid type! Expected: <class 'float'>. In [11]: x = 55 y = None check_exists ( x , 'Fifty five' ) check_exists ( y , 'Fifty six' ) --------------------------------------------------------------------------- Exception Traceback (most recent call last) <ipython-input-11-355540618803> in <module> 2 y = None 3 check_exists ( x , 'Fifty five' ) ----> 4 check_exists ( y , 'Fifty six' ) <ipython-input-6-22c582f36d19> in check_exists (value, variable_name) 5 def check_exists ( value , variable_name ) : 6 if value is None : ----> 7 raise Exception ( f\"Variable '{variable_name}' is None! Check variable exists.\" ) Exception : Variable 'Fifty six' is None! Check variable exists. Defining Functions Iteratively Now let's make use of the beauty that is looping to create all the combinations for us to use! We're going to encapsulate all these functions inside a dictionary to encapsulate them and provide a common interface for developers to use. In [140]: def log_and_raise ( exception_text ): # Add logging here raise Exception ( exception_text ) def create_validators ( types ): validators = {} for variable_type in types : validators [ f \" { variable_type . __name__ } \" ] = lambda value , variable_type = variable_type : value if type ( value ) == variable_type else log_and_raise ( f \"Variable isn't of type ' { variable_type . __name__ } '! D:\" ) return validators validate = create_validators ([ str , float , int ]) Now in a handful lines of code, we've created a dictionary with a way to easily generate functions to check variable types, and then log out the error (eg, write to a file) and raise an exception. Before we deconstruct what's happening here, let's see it in action. In [141]: validate [ 'str' ]( 'This is a string!' ) validate [ 'int' ]( 42 ) validate [ 'float' ]( 42.42 ) x = 'The number forty two' validate [ 'str' ]( x ) Out[141]: 'The number forty two' Fantastic, as we can see, it's not throwing any errors and continuing through our validations, now let's ensure our exception is raised (and subsequently any logging would be completed). In [142]: validate [ 'str' ]( 42 ) --------------------------------------------------------------------------- Exception Traceback (most recent call last) <ipython-input-142-fd464241a319> in <module> ----> 1 validate [ 'str' ] ( 42 ) <ipython-input-140-4899cd219b78> in <lambda> (value, variable_type) 6 validators = { } 7 for variable_type in types : ----> 8 validators [ f\"{variable_type.__name__}\" ] = lambda value , variable_type = variable_type : value if type ( value ) == variable_type else log_and_raise ( f\"Variable isn't of type '{variable_type.__name__}'! D:\" ) 9 return validators 10 <ipython-input-140-4899cd219b78> in log_and_raise (exception_text) 1 def log_and_raise ( exception_text ) : 2 # Add logging here ----> 3 raise Exception ( exception_text ) 4 5 def create_validators ( types ) : Exception : Variable isn't of type 'str'! D: Even better, we get raise an exception when our validation fails ensuring to alert the developers with information about why it failed. Now let's deconstruct how we created it in depth. Deconstruction of How Admittedly, there's a lot going on in those handful of lines which isn't obvious as to whats happening. First we define the overarching functions which contains the creation of all these functions, and thereafter initialise a dictionary to store all the following functions within. Next we loop over each of the types provided as a list to the function to create an entry in the dictionary using the __name__ dunder function (eg, str has a dunder __name__ of 'str'), this let's our developers use the type they want as the key of the dictionary when wanting to validate a variables type. Lambdas! The trickiest part here is how we are actually defining the functions. We make use of the lambda operator in Python to create anonymous functions . The structure of a lambda function definition follows: lambda arguments : true_statement if conditional_statement else false_statement We make use of a keyword argument of the variable_type in our loop otherwise the variable_type from the list passed in won't be correctly passed into the lambda function (which we won't discuss in this post). Finally we make use of an external function to centralise how we handle errors (making it easy to keep a consistent logging approach), and raise an Exception within that function to ensure any logging occurs before the program ultimately exits. Conclusion There are pros and cons to this approach to this problem. Pros : Concise way of creating lots of functions Consistent interface to use Stores all similar functions inside one object (dictionary) Cons : Not straightforward as to how it works Not straightforward to change functionality","tags":"python","url":"define-functions-iteratively-with-python.html","loc":"define-functions-iteratively-with-python.html"}]};